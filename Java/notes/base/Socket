一、网络通信协议及接口
	1、网络通信协议
		计算机网络中实现通信必须有一些约定及一些通信协议，对速率、传输代码、代码结构、传输控制步骤、出错控制等制定标准。
	2、网络通信接口
		为了使两个节点之间能进行对话，必须在它们之间建立通信工具(即接口)，使彼此之间能进行信息交换。
		接口包括两部分：
			硬件装置：实现结点之间的信息传送
			软件装置：规定双方进行通信的约定协议
二、通信协议分层的思想
	1、为什么要分层
		由于结点之间联系很复杂，在制定协议时，把复杂成分分解成一些简单的成分，再将他们复合起来。最常用的复合方式是层次方式，即同层间可以通信、上一层可以调用下一层，而与再下一层不发生关系。
		各层互不影响，利于系统的开发和扩展。
	2、通信协议的分层规定
		 把用户应用程序作为最高层，把物理通信线路作为最底层，将其间的协议处理分为若干层，规定每层处理的任务，也规定每层的接口标准。
	3、参考模型
		OSI参考模型：	应用层                                                           TCP/IP参考模型：   应用层
					表示层                                                                                                    传输层
					会话层								    网络层
					传输层                                                                                                    物理+数据链路层
					网络层
					数据链路层
					物理层
三、IP协议
	IP(Internet Protocol)协议是网际层的主要协议，支持网间互连的数据报通信。
	它提供的主要功能有：
		无连接数据报传送
		数据报路由选择和差错控制
四、TCP协议和UDP协议
	1、TCP(transmission control protocol)
		是专门设计用于在不可靠的因特网上提供可靠的、端到端的字节通信的协议。他是一种面向连接的协议。TCP连接是字节流而非报文流。
	2、UDP(user data protocol)
		UDP向应用程序提供了一种发送封装的原始IP数据报的方法、并且发送时无需建立连接。是一种不可靠的连接。
五、Socket
	1、两个Java应用程序可通过一个双向的网络通信连接实现数据交换，这个双向链路的一端称为一个Socket。
	2、Socket通常用来实现client-server连接。
	3、java.net包中定义的两个类Socket和SocketServer，分别用来实现双向连接的client和server端。
	4、建立连接时所需的寻址信息为远程计算机的IP地址和端口号(Port number)。	
	5、Socket通信模型
		Server                                       Client
		ServerSocket ss(port p)						 Socket(host,port)
		Socket s  = ss.accept() /等待连接                                            OutputStream
		OutputStream                                 InputStream
		InputStream                                  socket.close()
		socket.close()
	6、TCP端口、UDP端口是分开的
		每一个65536个端口