Java异常是Java提供的用于处理程序中错误的一种机制。
所谓错误是指在程序运行的过程中发生一些异常事件(如0溢出，数组下标越界，所要读取的文件不存在)
设计良好的程序应该在异常发生时提供处理这些错误的方法，使得程序不会因为异常的发生而阻断或产生不可预见的结果。
Java程序的执行过程中如出现异常事件，可以生成一个异常类对象，该异常对象封装了异常事件的信息并将异常提交给Java运行时系统，这个过程称为抛出(throw)异常。
当Java运行时系统接收到异常对象时，会寻找能处理这一异常的代码并把当前异常对象交给其处理，这一过程称为捕获(catch)异常。

Java中定义了很多异常类，这些类对应了各种各样可能出现的异常事件。
Throwable —— Error     
          —— Exception —— RuntimeException
Error：称为错误，由Java虚拟机生成并抛出，包括动态链接失败、虚拟机错误等，程序对其不做处理。
Exception：所有异常类的父类，其子类对应了各种各样可能出现的异常事件，一般需要用户显式的声明或捕获。
RuntimeException：一类特殊的异常，如被0除、数组下标越界等，其产生比较频繁，处理麻烦，如果显式的声明或捕获将对程序可读性和运行效率影响很大。
				因此由系统自动检测并将它们交给缺省的异常处理程序(用户可不必对其处理)
Exception(in java.lang)
	ClassNotFoundException
	IOException
	InterruptedException
	RuntimeException
		ArithmeticException NullPointerException
		IndexOutOfBoundsException
			ArrayIndexOutOfBoundsException
			StringIndexOutOfBoundsException
			
异常的捕获和处理
	try代码段可能产生例外的代码，try代码段后面跟一个或多个catch代码段。
	每个catch代码段声明其能处理的一种特定类型的异常	并提供处理的方法。
	当异常发生时，程序会终止当前的流程，根据获取异常的类型去执行相应的代码段。
	finally段的代码无论是否发生异常都会执行。
try语句
	try语句指定了一段代码，该段代码就是一次捕获并处理例外的范围。
	在执行过程中，该段代码可能会产生并抛出一种或几种类型的异常对象，它后面的catch语句要分别对这些异常做相应的处理。
	如果没有例外产生，所有的catch代码段都被略过不执行。
catch语句
	在catch语句块中是对异常进行处理的代码，每个try语句块可以伴随一个或多个catch语句，用于处理可能产生的不同类型的异常对象。
	在catch中声明的异常对象(catch(SomeException e))封装了异常事件发生的信息，在catch语句块中可以使用这个对象的一些方法获取这些信息。
	catch捕获异常时先捕获小范围的异常，再捕获大范围的异常(或总的异常Exception),否则编译不通过。
	例如：getMessage()方法，用于得到有关异常事件的信息
		 printStackTrace()方法，用来跟踪异常事件发生时执行堆栈的内容。
finally语句
	finally语句为异常处理提供了一个统一的出口，使得控制流程转到其他部分以前，能够对程序的状态作统一的管理。
	无论try所指定的程序块中是否抛出例外，finally所指定的代码都会执行。
	通常在finally语句中可以进行资源的清楚工作，如：
		关闭打开的文件
		删除临时的文件
		
自定义的异常
	一般步骤：
		1、通过继承java.lang.Exception类(或RuntimeException)声明自己的异常类。
		2、在方法适当的位置生成自定义异常的实例，并用throw语句抛出。
		3、在方法的声明部分用throws语句声明该方法可能抛出的异常。
		
注意：重写方法需要抛出与原方法所抛出异常类型一致异常或不抛出异常。