1、类：描述同一类型的对象的一个抽象的概念。类中定义了这一类对象所具有的静态和动态的属性。
	类是对象的模版，对象是类的一个具体实例。
2、类(对象)之间的关系：关联、继承、聚合(聚集、组合)、实现、多态。
3、成员变量不赋值会自动初始化，局部变量不会自动初始化。
4、添加构造方法后，系统默认的构造方法就没有了。
5、方法一旦执行完毕，为这个方法中的局部变量分配的内存就会消失。
6、static 对类的所有成员变量来说，static成员变量只有一个。
7、package：如果想将一个类放入包中，在这个类源文件第一句话写package
	必须class文件的最上层包的父目录位于classpath下
8、访问控制符：private 类内部    default：类内部，同一个包   protected：类内部，同包，子类   public 任何地方
9、重写：在子类中可以根据需要对从基类中继承来的方法进行重写。
		重写方法必须和被重写方法具有相同方法名称，参数列表和返回类型。
		重写方法不能使用比被重写方法更严格的访问权限。
10、继承中的构造方法：
	子类的构造过程中必须调用其基类的构造方法。
	子类可以在自己的构造方法中使用super(argument_list)调用基类的构造方法。(如果调用super，必须写在子类构造方法的第一行)
	(使用this(argument_list)调用本类的另外的构造方法)
	如果子类的构造方法中没有显示地调用基类构造方法，则系统默认调用父类无参的构造方法。
	如果子类的构造方法中既没有显示地调用基类的构造方法，而基类中又没有无参的构造方法，则编译出错。
11、toString方法
	Object类中定义有public String toString()方法，返回值是String类型，描述当前对象的有关信息。
	在进行String与其他数据类型连接操作时(如：System.out.println("info"+person))，将自动调用该对象的toString()方法。
	可以根据需要在用户自定义类型中重写toString()方法。
12、equals方法
	Object类中定义有：public boolean equals(Object obj)方法，提供定义对象是否"相等"的逻辑。
	Object的equals方法定义为：x.equals(y) 当x和y是同一个对象的引用时返回true否则返回false。
	Java提供一些类，如String、Date等，重写了Object的equals方法，调用这些类的equals方法，x.equals(y),当x和y所引用的对象是同一类对象且属性内容相同时(并不一定是相同对象)，返回true否则返回false。
	可以根据需要在自定义类型中重写equals方法。
13、对象转型(casting)
	一个基类的引用类型变量可以"指向"其子类的对象。
	一个基类的引用不可以访问其子类对象新增加的成员(属性和方法)。
	可以使用 "引用变量 instanceof 类名" 来判断该引用类型变量所"指向"的对象是否属于该类或该类的子类。
	子类的对象可以当做基类的对象来使用称作向上转型(upcasting),反之称为向下转型(downcasting)。
14、多态(动态绑定)
	多态是指在执行期间(而非编译期)判断所引用对象的实际类型，根据其实际的类型调用其相应的方法。
	多态的条件：1、要有继承 2、要有重写  3、父类的引用指向子类的对象
15、抽象类
	用abstract关键字来修饰一个类时，这个类叫做抽象类；用abstract修饰一个方法时，该方法叫做抽象方法。
	含有抽象方法的类必须声明为抽象类，抽象类必须被继承，抽象方法必须被重写。
	抽象类不能被实例化。
	抽象方法只需声明，而不需实现。
16、final关键字
	final修饰的变量的值不能被修改(final的成员变量，final的局部变量(包含形参))
	final修饰的方法不能被重写
	final修饰的类不能被继承
17、接口
	1、接口(interface)是抽象方法和常量值的定义的集合。
	2、从本质上讲，接口是一种特殊的抽象类，这种抽象类中只包含常量和方法的定义，而没有变量和方法的实现。
	3、多个无关的类可以实现同一个接口；
		一个类可以实现多个无关的接口；
		与继承关系类似，接口与实现类之间存在多态性。
	4、接口特性
		接口可以多重实现；
		接口中声明的属性默认为public static final的，也只能是public static final的；
		接口中只能定义抽象方法，而且这些方法默认为public的、也只能是public的；
		接口可以继承其他接口，并添加新的属性和抽象方法。